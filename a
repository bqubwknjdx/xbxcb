repeat task.wait() until game:IsLoaded()

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local request = http_request or syn and syn.request or request or (fluxus and fluxus.request)

if not request then
    return warn("‚ùå Exploit kh√¥ng h·ªó tr·ª£ HTTP Request.")
end
local api_url = "https://dfc20de2-9f2b-4b16-b0d0-16032ee9345e-00-1npj8usqtd1ky.sisko.replit.dev"

-- üîê H√†m ki·ªÉm tra x√°c th·ª±c /validate
local function validateUser()
    local response = request({
        Url = api_url .. "/validate",
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = HttpService:JSONEncode({
            key = key,
            id = id,
            hwid = hwid
        })
    })

    local success, result = pcall(function()
        return HttpService:JSONDecode(response.Body)
    end)

    if success and result and result.valid then
        return true
    else
        return false, (result and result.error) or "L·ªói x√°c th·ª±c kh√¥ng r√µ."
    end
end

-- üìú H√†m l·∫•y v√† ch·∫°y script t·ª´ API n·∫øu h·ª£p l·ªá
local function getScript()
    local response = request({
        Url = api_url .. "/getscript",
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = HttpService:JSONEncode({ id = id })
    })

    local success, result = pcall(function()
        return HttpService:JSONDecode(response.Body)
    end)

    if success and result and result.script then
        print("‚úÖ ƒêang t·∫£i script t·ª´ server...")
        loadstring(result.script)()
    else
        warn("‚ùå Kh√¥ng th·ªÉ t·∫£i script:", (result and result.error) or "L·ªói kh√¥ng x√°c ƒë·ªãnh.")
    end
end

-- üöÄ Ch·∫°y x√°c th·ª±c v√† t·∫£i script n·∫øu h·ª£p l·ªá
local ok, err = validateUser()
if ok then
    print("‚úÖ X√°c th·ª±c th√†nh c√¥ng. ƒêang ch·∫°y script...")
    getScript()
else
    warn("‚ùå X√°c th·ª±c th·∫•t b·∫°i:", err)
end
