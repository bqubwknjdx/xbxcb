local HttpService = game:GetService("HttpService")

-- üß© L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ getgenv()
local key = getgenv().Key or "nil"
local id = getgenv().ID or "nil"

-- ‚öôÔ∏è T·ª± t·∫°o HWID (ƒë∆°n gi·∫£n)
local hwid = "hwid-" .. tostring(game:GetService("RbxAnalyticsService"):GetClientId())

-- ‚úÖ Request h·ªó tr·ª£ m·ªçi executor
local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request)
if not request then return error("‚ùå Exploit kh√¥ng h·ªó tr·ª£ HTTP Request.") end

-- üì° G·ª≠i request x√°c th·ª±c
local api = "https://dfc20de2-9f2b-4b16-b0d0-16032ee9345e-00-1npj8usqtd1ky.sisko.replit.dev/validate"
local response = request({
    Url = api,
    Method = "POST",
    Headers = {
        ["Content-Type"] = "application/json"
    },
    Body = HttpService:JSONEncode({
        key = key,
        id = id,
        hwid = hwid
    })
})

local result = HttpService:JSONDecode(response.Body)
if result.valid then
    print("‚úÖ X√°c th·ª±c th√†nh c√¥ng. ƒêang t·∫£i script...")

    -- üß† T·∫£i script g·ªëc t·ª´ GitHub ho·∫∑c API kh√°c
    local source = game:HttpGet("https://raw.githubusercontent.com/bqubwknjdx/xbxcb/main/main.lua")
    loadstring(source)()
else
    warn("‚ùå X√°c th·ª±c th·∫•t b·∫°i:", result.error or "Kh√¥ng r√µ l√Ω do")
end

